// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package maxpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// BiDi streaming
	FindMax(ctx context.Context, opts ...grpc.CallOption) (API_FindMaxClient, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) FindMax(ctx context.Context, opts ...grpc.CallOption) (API_FindMaxClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], "/maxpb.API/FindMax", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIFindMaxClient{stream}
	return x, nil
}

type API_FindMaxClient interface {
	Send(*Req) error
	Recv() (*Res, error)
	grpc.ClientStream
}

type aPIFindMaxClient struct {
	grpc.ClientStream
}

func (x *aPIFindMaxClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIFindMaxClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	// BiDi streaming
	FindMax(API_FindMaxServer) error
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) FindMax(API_FindMaxServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMax not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_FindMax_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).FindMax(&aPIFindMaxServer{stream})
}

type API_FindMaxServer interface {
	Send(*Res) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type aPIFindMaxServer struct {
	grpc.ServerStream
}

func (x *aPIFindMaxServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIFindMaxServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maxpb.API",
	HandlerType: (*APIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindMax",
			Handler:       _API_FindMax_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "maxpb/max.proto",
}
