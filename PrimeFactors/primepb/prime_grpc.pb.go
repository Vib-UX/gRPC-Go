// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package primepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimeDecompoClient is the client API for PrimeDecompo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeDecompoClient interface {
	// Server streaming api
	Prime(ctx context.Context, in *NumReq, opts ...grpc.CallOption) (PrimeDecompo_PrimeClient, error)
}

type primeDecompoClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeDecompoClient(cc grpc.ClientConnInterface) PrimeDecompoClient {
	return &primeDecompoClient{cc}
}

func (c *primeDecompoClient) Prime(ctx context.Context, in *NumReq, opts ...grpc.CallOption) (PrimeDecompo_PrimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PrimeDecompo_ServiceDesc.Streams[0], "/primeDecompo.PrimeDecompo/prime", opts...)
	if err != nil {
		return nil, err
	}
	x := &primeDecompoPrimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PrimeDecompo_PrimeClient interface {
	Recv() (*Res, error)
	grpc.ClientStream
}

type primeDecompoPrimeClient struct {
	grpc.ClientStream
}

func (x *primeDecompoPrimeClient) Recv() (*Res, error) {
	m := new(Res)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrimeDecompoServer is the server API for PrimeDecompo service.
// All implementations must embed UnimplementedPrimeDecompoServer
// for forward compatibility
type PrimeDecompoServer interface {
	// Server streaming api
	Prime(*NumReq, PrimeDecompo_PrimeServer) error
	mustEmbedUnimplementedPrimeDecompoServer()
}

// UnimplementedPrimeDecompoServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeDecompoServer struct {
}

func (UnimplementedPrimeDecompoServer) Prime(*NumReq, PrimeDecompo_PrimeServer) error {
	return status.Errorf(codes.Unimplemented, "method Prime not implemented")
}
func (UnimplementedPrimeDecompoServer) mustEmbedUnimplementedPrimeDecompoServer() {}

// UnsafePrimeDecompoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeDecompoServer will
// result in compilation errors.
type UnsafePrimeDecompoServer interface {
	mustEmbedUnimplementedPrimeDecompoServer()
}

func RegisterPrimeDecompoServer(s grpc.ServiceRegistrar, srv PrimeDecompoServer) {
	s.RegisterService(&PrimeDecompo_ServiceDesc, srv)
}

func _PrimeDecompo_Prime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NumReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrimeDecompoServer).Prime(m, &primeDecompoPrimeServer{stream})
}

type PrimeDecompo_PrimeServer interface {
	Send(*Res) error
	grpc.ServerStream
}

type primeDecompoPrimeServer struct {
	grpc.ServerStream
}

func (x *primeDecompoPrimeServer) Send(m *Res) error {
	return x.ServerStream.SendMsg(m)
}

// PrimeDecompo_ServiceDesc is the grpc.ServiceDesc for PrimeDecompo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimeDecompo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "primeDecompo.PrimeDecompo",
	HandlerType: (*PrimeDecompoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "prime",
			Handler:       _PrimeDecompo_Prime_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "primepb/prime.proto",
}
